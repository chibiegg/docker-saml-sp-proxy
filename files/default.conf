server {
    listen       80 default_server;
    listen       [::]:80 default_server;
    server_name  _;
    root         /usr/share/nginx/html;

    location / {
        return 301 https://$host$request_uri;
    }

    location /.well-known {
    }
}

server {
    listen 443 ssl;
    server_name ${NGINX_SERVER_NAME};

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 5m;
    ssl_ciphers AESGCM:HIGH:!EXP:!RC4:!LOW:!aNULL;
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1.2;

    ssl_certificate /etc/nginx/server.crt;
    ssl_certificate_key /etc/nginx/server.key;

    root /usr/share/nginx/html;

    location / {
        access_by_lua_block {
            local config = require "saml.service_provider.config"
            local sp = require("saml.service_provider"):new(config)

            local ok, err = sp:access()
            if err ~= nil then
            ngx.log(ngx.ERR, err)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            return
            end
        }

        include /etc/nginx/default.d/*.conf;
    }

    location /sso/finish-login {
        content_by_lua_block {
            local config = require "saml.service_provider.config"
            local sp = require("saml.service_provider"):new(config)

            local ok, err = sp:finish_login()
            if err ~= nil then
            ngx.log(ngx.ERR, err)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            return
            end
        }
    }

    location /sso/logout {
        content_by_lua_block {
            local config = require "saml.service_provider.config"
            local sp = require("saml.service_provider"):new(config)

            local ok, err = sp:logout()
            if err ~= nil then
            ngx.log(ngx.ERR, err)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            return
            end
        }
    }

    location .well-known {
    }
}
